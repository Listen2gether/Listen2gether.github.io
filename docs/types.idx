nimTitle	types	types.html	module types		0
nim	Session	types.html#Session	type Session		6
nim	listenBrainzService	types.html#listenBrainzService	Service.listenBrainzService		12
nim	lastFmService	types.html#lastFmService	Service.lastFmService		12
nim	Service	types.html#Service	enum Service		12
nim	User	types.html#User	type User		19
nim	Listen	types.html#Listen	object Listen		32
nim	newSession	types.html#newSession,cstring,seq[cstring]	proc newSession(id: cstring = "session"; users: seq[cstring] = @[];\n           mirror = none(cstring)): Session		42
nim	genId	types.html#genId,cstring,Service	proc genId(username: cstring; service: Service): cstring		51
nim	newUser	types.html#newUser,cstring,Service,cstring,cstring,int,seq[Listen]	proc newUser(username: cstring; service: Service; token, sessionKey: cstring = "";\n        lastUpdateTs = 0; playingNow = none(Listen);\n        listenHistory: seq[Listen] = @[]): User		57
nim	`==`	types.html#==,User,User	proc `==`(a, b: User): bool		77
nim	newListen	types.html#newListen,cstring,cstring	proc newListen(trackName, artistName: cstring;\n          releaseName, recordingMbid, releaseMbid = none(cstring);\n          artistMbids = none(seq[cstring]); trackNumber = none(int);\n          listenedAt = none(int); mirrored, preMirror = none(bool)): Listen		79
nim	`==`	types.html#==,Listen,Listen	proc `==`(a, b: Listen): bool		98
nimgrp	==	types.html#==-procs-all	proc		77
